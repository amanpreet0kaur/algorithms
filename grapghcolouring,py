def is_safe(graph, vertex, color, color_assignment):
    for neighbor in graph[vertex]:
        if color_assignment[neighbor] == color:
            return False
    return True

def graph_colouring_util(graph, num_colors, vertex, color_assignment):
    if vertex == len(graph):
        return True
    
    for color in range(1, num_colors + 1):
        if is_safe(graph, vertex, color, color_assignment):
            color_assignment[vertex] = color
            if graph_colouring_util(graph, num_colors, vertex + 1, color_assignment):
                return True
            color_assignment[vertex] = 0
    
    return False

def graph_colouring(graph, num_colors):
    color_assignment = [0] * len(graph)
    if graph_colouring_util(graph, num_colors, 0, color_assignment):
        return color_assignment
    else:
        return None

# Example usage:
graph = {
    0: [1, 2],
    1: [0, 2],
    2: [0, 1, 3],
    3: [2]
}
num_colors = 3
color_assignment = graph_colouring(graph, num_colors)
if color_assignment:
    print("Minimum number of colours required:", max(color_assignment))
    print("Color assignment for each vertex:", color_assignment)
else:
    print("No valid colouring possible with the given number of colours.")
